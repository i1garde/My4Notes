@using MediatR
@using Microsoft.AspNetCore.Antiforgery
@using My4Notes.Entities
@using My4Notes.Resources.Queries
@using My4Notes.Web.Components.Layout
@using My4Notes.Web.Components.Services
@using My4Notes.Web.Components.CustomComponents
@inject SearchService searchService
@inject NotesService notesService
@inject IAntiforgery antiforgery
@inject IHttpContextAccessor HttpContextAccessor

@if (filteredNotes.Count() <= 8)
{
    @foreach (var note in filteredNotes)
    {
        <NoteCard Note=note ExpandNoteState=false EditNoteState=false Token=@Token />
    }
}
else
{
    @foreach (var note in filteredNotes.Skip(8 * (Page - 1)).Take(8))
    {
        <NoteCard Note=note ExpandNoteState=false EditNoteState=false Token=@Token />
    }

    <nav id="pagination-nav" aria-label="Page navigation example" class="d-flex justify-content-center p-3 my-3">
        <ul id="pagination-ul" class="pagination pagination-black">
            @if (Page - 1 == 0)
            {
                <li id="pagination-li-prev" class="page-item disabled">
                    <button id="pagination-button-prev" class="page-link" tabindex="-1" aria-disabled="true">Previous</button>
                </li>
            }
            else
            {
                <li id="pagination-li-prev" class="page-item">
                    <button id="pagination-button-prev" class="page-link" @onclick="DecPage">Previous</button>
                </li>
            }
            @for (var i = 1; i <= GetPagesCount(filteredNotes.Count); i++)
            {
                var pageNumber = i;
                <li id="pagination-li-@i" class="page-item">
                    <button id="pagination-button-@i" class="page-link" @onclick="(e) => SetPage(pageNumber)">@i</button>
                </li>
            }
            @if (Page == GetPagesCount(filteredNotes.Count))
            {
                <li id="pagination-li-next" class="page-item disabled">
                    <button id="pagination-button-next" class="page-link" tabindex="-1" aria-disabled="true">Next</button>
                </li>
            }
            else
            {
                <li id="pagination-li-next" class="page-item">
                    <button id="pagination-button-next" class="page-link" @onclick="IncPage">Next</button>
                </li>
            }
        </ul>
    </nav>
}

@code {
    [Parameter]
    public List<Note> Notes { get; set; }
    [Parameter]
    public int Page { get; set; }
    private List<Note> filteredNotes;
    
    private AntiforgeryTokenSet Token { get; set; }
    private CreateNoteModal CreateNoteModal { get; set; }
    
    protected override void OnInitialized()
    {
        filteredNotes = Notes;
        var token = antiforgery.GetAndStoreTokens(HttpContextAccessor.HttpContext);
        Token = token;
        searchService.OnSearchChange += UpdateFilteredNotes;
        notesService.OnNotesListChange += UpdateNotesList;
    }

    private void UpdateFilteredNotes(string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredNotes = Notes;
        }
        else
        {
            filteredNotes = 
                Notes
                    .Where(note => 
                        note.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || 
                        note.Text.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                    .ToList();
        }

        StateHasChanged();
    }
    
    private async Task UpdateNotesList()
    {
        var notes = await notesService.GetNotes();
        Notes = notes;
        filteredNotes = notes;
        StateHasChanged();
    }
    
    private void UpdatePageNumber(int page)
    {
        Page = page;
        StateHasChanged();
    }

    private void IncPage() => Page += 1;
    private void DecPage() => Page -= 1;
    private int GetPagesCount(int notesCount) => notesCount / 8 + 1;

    private void SetPage(int i)
    {
        Page = i;
    }
}